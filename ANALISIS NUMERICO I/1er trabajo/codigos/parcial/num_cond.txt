import numpy as np

def norm_inf(a):
    n = len(a)
    s = [0.0]*n
    
    for k in range(n):
        s[k] = sum([abs(x) for x in a[k][0:n]])
    
    return max(s)

def inv_m(a):
    n = len(a)
    a_inv = np.identity(n)
    
    for k in range(n):
        d = a[k,k]
        a[k,0:n] = a[k,0:n]/d
        a_inv[k,0:n] = a_inv[k,0:n]/d
        
        for j in range(k+1,n):
            lam = a[j,k]/a[k,k]
            a_inv[j,0:n] = a_inv[j,0:n] - lam*a_inv[k,0:n]
            a[j,0:n] = a[j,0:n] - lam*a[k,0:n]
            
    for k in range(n-1,-1,-1):
        for j in range(k-1,-1,-1):
            d = a[j,k]
            a[j,0:n] = a[j,0:n]-d*a[k,0:n]
            a_inv[j,0:n] = a_inv[j,0:n]-d*a_inv[k,0:n]
    return a_inv
        
def cond_m_inf(a):
    return norm_inf(a)*norm_inf(inv_m(a))
    
    
A = np.array([[2.,1.,-1.],
             [-3., -1., 2.],
             [-2., 1., 2.]])

inva = inv_m(A)

A = np.array([[2.,1.,-1.],
             [-3., -1., 2.],
             [-2., 1., 2.]])


print(A)
print(inva)
print(cond_m_inf(A))